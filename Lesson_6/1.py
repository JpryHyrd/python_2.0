"""
1. Подсчитать, сколько было выделено памяти под переменные в ранее
разработанных программах в рамках первых трех уроков. Проанализировать
результат и определить программы с наиболее эффективным использованием памяти.
Примечание: Для анализа возьмите любые 1-3 ваших программы или несколько
вариантов кода для одной и той же задачи. Результаты анализа вставьте в виде
комментариев к коду. Также укажите в комментариях версию Python
и разрядность вашей ОС.
"""
from memory_profiler import profile


#_____________________________________1_____________________________________________
"""
3.	Сформировать из введенного числа обратное по порядку входящих в него
цифр и вывести на экран. Например, если введено число 3486,
 то надо вывести число 6843.
"""

@profile
def num():
    number = input("Для реверсирования числа необходимо его ввести(0 - выход): ")
    if number == "0":
        print("BB")
    else:
        a = ""
        b = ""
        c = ""
        for i in number:
            c = i + c
        print("Реверс числа {} равняется {}" .format(number, c))
        num()
num()



#На переменную number было выделено 0.1 MiB, на остальные переменные
#памяти выделено гораздо меньше, округленик показало 0.0 MiB.
#Вывод: память используется эффективно.




#_______________________________________2___________________________________________


"""
6.	В программе генерируется случайное целое число от 0 до 100.
Пользователь должен его отгадать не более чем за 10 попыток. После каждой
неудачной попытки должно сообщаться больше или меньше введенное пользователем
число, чем то, что загадано. Если за 10 попыток число не отгадано,
то вывести загаданное число.
"""

import random
@profile
def z():
    def g(us, rel):
        m = 0
        if int(us) == rel:
            print("Угадал!")
            m = 1
        elif int(us) < rel:
            print("Больше")
        elif int(us) > rel:
            print("Меньше")
        return m
    r = input("Отгадай число от 0 до 100, играем? (0 - нет): ")
    if r == "0":
        print("BB")
    else:
        d = 0
        v = random.randint(0, 100)
        m = 0
        while d < 10 and m == 0:
            b = input("Предположения: ")
            m = g(b, v)
            d += 1
        print("Загаданное число - " + str(v))
        z()
z()


#Память, используемая переменными очень мала, округленик показало 0.0 MiB.
#Вывод: память используется эффективно.






#_______________________________________3___________________________________________

"""
8.	Посчитать, сколько раз встречается определенная цифра в введенной
 последовательности чисел. Количество вводимых чисел и цифра,
 которую необходимо посчитать, задаются вводом с клавиатуры.
"""
@profile
def gr():
    a1 = input("Введите число, количество цифр которой надо посчитать: ")
    b1 = input("Введите подсчитываемую цифру: ")
    c1 = 0
    for e in a1:
        if e == b1:
            c1 += 1
    print(c1)

gr()

#На переменную a1 было выделено 0.1 MiB, на остальные переменные
#памяти выделено гораздо меньше, округленик показало 0.0 MiB.
#Вывод: память используется эффективно.



#Вывод: переменная, содержащая большое количество символов,
#требует больше памяти. (© Капитан Очевидность)

#Python 3.7; Разрядность - x64 бит

